#!/usr/bin/env node

/**
 * Environment Setup Script for ConsultTeligence
 * 
 * This script helps users configure their environment variables for different
 * Strapi environments (local, staging, production).
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Environment configurations
const environments = {
  local: {
    name: 'Local Development',
    url: 'http://localhost:1337/api',
    description: 'Local Strapi instance running on localhost:1337',
    tokenVar: 'STRAPI_TOKEN_LOCAL'
  },
  
  render: {
    name: 'Render Production',
    url: 'https://consult-teligence-backend.onrender.com/api',
    description: 'Hosted Strapi instance on Render',
    tokenVar: 'STRAPI_TOKEN_RENDER'
  },
  
  staging: {
    name: 'Staging Environment',
    url: 'https://your-staging-url.com/api',
    description: 'Staging environment for testing',
    tokenVar: 'STRAPI_TOKEN_STAGING'
  }
};

// Example .env content
const envExample = `# Strapi API Configuration
# Copy this file to .env and fill in your actual values

# Local Development Environment
STRAPI_TOKEN_LOCAL=your_local_token_here

# Render Production Environment  
STRAPI_TOKEN_RENDER=your_render_token_here

# Staging Environment
STRAPI_TOKEN_STAGING=your_staging_token_here

# Fallback token (used if specific environment token not set)
STRAPI_TOKEN=your_fallback_token_here

# Optional: Override API URL
# STRAPI_URL=http://localhost:1337/api

# To get your API token:
# 1. Go to your Strapi admin panel
# 2. Navigate to Settings > API Tokens
# 3. Create a new token with appropriate permissions
# 4. Copy the token and paste it above
`;

function showHelp() {
  console.log(`
üöÄ ConsultTeligence Environment Setup

This script helps you configure your environment variables for different Strapi environments.

Available commands:
  setup     - Interactive setup for environment variables
  create    - Create .env file with template
  list      - List available environments
  help      - Show this help message

Examples:
  node scripts/setup-environments.js setup
  node scripts/setup-environments.js create
  node scripts/setup-environments.js list
`);
}

function listEnvironments() {
  console.log('\nüåç Available Environments:');
  console.log('==========================');
  
  Object.entries(environments).forEach(([key, env]) => {
    console.log(`\n${key}:`);
    console.log(`   Name: ${env.name}`);
    console.log(`   URL: ${env.url}`);
    console.log(`   Description: ${env.description}`);
    console.log(`   Token Variable: ${env.tokenVar}`);
  });
  
  console.log('\nüí° To use an environment, set the corresponding token variable:');
  console.log('   export STRAPI_TOKEN_LOCAL="your_token_here"');
  console.log('   export STRAPI_TOKEN_RENDER="your_token_here"');
  console.log('   export STRAPI_TOKEN_STAGING="your_token_here"');
}

function createEnvFile() {
  const envPath = path.join(__dirname, '..', '.env');
  
  if (fs.existsSync(envPath)) {
    console.log('‚ö†Ô∏è  .env file already exists. Skipping creation.');
    console.log('   If you want to recreate it, delete the existing file first.');
    return;
  }
  
  try {
    fs.writeFileSync(envPath, envExample);
    console.log('‚úÖ Created .env file with template');
    console.log('üìù Edit the file and add your actual API tokens');
    console.log(`üìÅ File location: ${envPath}`);
  } catch (error) {
    console.error('‚ùå Failed to create .env file:', error.message);
  }
}

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

async function interactiveSetup() {
  console.log('\nüîß Interactive Environment Setup');
  console.log('================================');
  console.log('\nThis will help you configure your environment variables.');
  console.log('You can skip any environment by pressing Enter without entering a token.\n');
  
  const tokens = {};
  
  for (const [key, env] of Object.entries(environments)) {
    console.log(`\n${env.name} (${env.url})`);
    console.log(`Description: ${env.description}`);
    
    const token = await question(`Enter your API token for ${key} (or press Enter to skip): `);
    
    if (token.trim()) {
      tokens[env.tokenVar] = token.trim();
      console.log(`‚úÖ Token saved for ${key}`);
    } else {
      console.log(`‚è≠Ô∏è  Skipped ${key}`);
    }
  }
  
  // Ask for fallback token
  console.log('\nFallback Token');
  console.log('This token will be used if a specific environment token is not set.');
  const fallbackToken = await question('Enter fallback API token (or press Enter to skip): ');
  
  if (fallbackToken.trim()) {
    tokens.STRAPI_TOKEN = fallbackToken.trim();
    console.log('‚úÖ Fallback token saved');
  }
  
  // Generate .env content
  let envContent = '# Strapi API Configuration\n';
  envContent += '# Generated by setup script\n\n';
  
  Object.entries(tokens).forEach(([key, value]) => {
    envContent += `${key}=${value}\n`;
  });
  
  // Save to .env file
  const envPath = path.join(__dirname, '..', '.env');
  
  try {
    fs.writeFileSync(envPath, envContent);
    console.log('\n‚úÖ Environment variables saved to .env file');
    console.log(`üìÅ File location: ${envPath}`);
    
    console.log('\nüìã Summary of configured environments:');
    Object.entries(tokens).forEach(([key, value]) => {
      const maskedValue = value.substring(0, 8) + '...' + value.substring(value.length - 4);
      console.log(`   ${key}=${maskedValue}`);
    });
    
  } catch (error) {
    console.error('‚ùå Failed to save .env file:', error.message);
  }
  
  rl.close();
}

// Main execution
async function main() {
  const command = process.argv[2];
  
  switch (command) {
    case 'setup':
      await interactiveSetup();
      break;
      
    case 'create':
      createEnvFile();
      break;
      
    case 'list':
      listEnvironments();
      break;
      
    case 'help':
    case undefined:
      showHelp();
      break;
      
    default:
      console.error(`‚ùå Unknown command: ${command}`);
      showHelp();
      process.exit(1);
  }
}

// Run the script
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå Setup failed:', error.message);
    process.exit(1);
  });
}

module.exports = {
  environments,
  showHelp,
  listEnvironments,
  createEnvFile,
  interactiveSetup
};